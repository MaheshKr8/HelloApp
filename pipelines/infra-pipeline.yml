trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'MyAzureServiceConnection'  # Replace with your Azure service connection name
  tfWorkingDirectory: 'HelloApp/infra'
  terraformVersion: '1.7.5'

steps:

# Step 1: Checkout repo
- checkout: self

# Step 2: Install Terraform using Jason Johnson extension
- task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: $(terraformVersion)

# Step 3: Terraform Init using Jason Johnson extension
- task: JasonBJohnson.azure-pipelines-tasks-terraform.TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: $(tfWorkingDirectory)
    backendServiceArm: $(azureServiceConnection)
    backendAzureRmResourceGroupName: 'tfstate-rg'      # Replace with your RG
    backendAzureRmStorageAccountName: 'tfstatestorage' # Replace with your Storage Account
    backendAzureRmContainerName: 'tfstate'             # Replace with your Blob Container
    backendAzureRmKey: 'terraform.tfstate'

# Step 4: Terraform Plan using Jason Johnson extension
- task: JasonBJohnson.azure-pipelines-tasks-terraform.TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: $(tfWorkingDirectory)
    environmentServiceNameAzureRM: $(azureServiceConnection)
    ensureBackend: true

# Step 5: Terraform Apply using Jason Johnson extension
- task: JasonBJohnson.azure-pipelines-tasks-terraform.TerraformTaskV4@4
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: $(tfWorkingDirectory)
    environmentServiceNameAzureRM: $(azureServiceConnection)
    ensureBackend: true
    args: '-auto-approve'
